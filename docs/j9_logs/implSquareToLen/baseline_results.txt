# JMH version: 1.36
# VM version: JDK 17.0.9-internal, Eclipse OpenJ9 VM, master-d3388e166
# *** WARNING: This VM is not supported by JMH. The produced benchmark data can be completely wrong.
# VM invoker: /workspace/jdk17/build/linux-x86_64-server-release/jdk/bin/java
# VM options: -Xoptionsfile=/workspace/jdk17/build/linux-x86_64-server-release/jdk/lib/options.default -Xlockword:mode=default,noLockword=java/lang/String,noLockword=java/util/MapEntry,noLockword=java/util/HashMap$Entry,noLockword=org/apache/harmony/luni/util/ModifiedMap$Entry,noLockword=java/util/Hashtable$Entry,noLockword=java/lang/invoke/MethodType,noLockword=java/lang/invoke/MethodHandle,noLockword=java/lang/invoke/CollectHandle,noLockword=java/lang/invoke/ConstructorHandle,noLockword=java/lang/invoke/ConvertHandle,noLockword=java/lang/invoke/ArgumentConversionHandle,noLockword=java/lang/invoke/AsTypeHandle,noLockword=java/lang/invoke/ExplicitCastHandle,noLockword=java/lang/invoke/FilterReturnHandle,noLockword=java/lang/invoke/DirectHandle,noLockword=java/lang/invoke/ReceiverBoundHandle,noLockword=java/lang/invoke/DynamicInvokerHandle,noLockword=java/lang/invoke/FieldHandle,noLockword=java/lang/invoke/FieldGetterHandle,noLockword=java/lang/invoke/FieldSetterHandle,noLockword=java/lang/invoke/StaticFieldGetterHandle,noLockword=java/lang/invoke/StaticFieldSetterHandle,noLockword=java/lang/invoke/IndirectHandle,noLockword=java/lang/invoke/InterfaceHandle,noLockword=java/lang/invoke/VirtualHandle,noLockword=java/lang/invoke/PrimitiveHandle,noLockword=java/lang/invoke/InvokeExactHandle,noLockword=java/lang/invoke/InvokeGenericHandle,noLockword=java/lang/invoke/VarargsCollectorHandle,noLockword=java/lang/invoke/ThunkTuple -XX:+EnsureHashed:java/lang/Class,java/lang/Thread -Xjcl:jclse29 -Dcom.ibm.oti.vm.bootstrap.library.path=/workspace/jdk17/build/linux-x86_64-server-release/jdk/lib/default:/workspace/jdk17/build/linux-x86_64-server-release/jdk/lib -Dsun.boot.library.path=/workspace/jdk17/build/linux-x86_64-server-release/jdk/lib/default:/workspace/jdk17/build/linux-x86_64-server-release/jdk/lib -Djava.library.path=/workspace/jdk17/build/linux-x86_64-server-release/jdk/lib/default:/workspace/jdk17/build/linux-x86_64-server-release/jdk/lib:/usr/lib64:/usr/lib -Djava.home=/workspace/jdk17/build/linux-x86_64-server-release/jdk -Duser.dir=/workspace/microbench -Dfile.encoding=US-ASCII -Djava.io.tmpdir=/workspace/microbench/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant -Djava.class.path=/root/.gradle/caches/modules-2/files-2.1/org.openjdk.jmh/jmh-generator-bytecode/1.36/b8ab8b88a6b48a0cb540ede365fa84876e6608bf/jmh-generator-bytecode-1.36.jar:/root/.gradle/caches/modules-2/files-2.1/org.openjdk.jmh/jmh-generator-annprocess/0.9/a6d27ae7c72c4d4336d0523c8953eb96d767c98a/jmh-generator-annprocess-0.9.jar:/root/.gradle/caches/modules-2/files-2.1/org.openjdk.jmh/jmh-generator-asm/1.36/ea8dba84346f9ecd34fc85f83fc1a14f7475348e/jmh-generator-asm-1.36.jar:/root/.gradle/caches/modules-2/files-2.1/org.openjdk.jmh/jmh-generator-reflection/1.36/40c9b3bb0523b58dada012987172452895f2c6cb/jmh-generator-reflection-1.36.jar:/root/.gradle/caches/modules-2/files-2.1/org.openjdk.jmh/jmh-core/1.36/5a69117788322630fc5f228bc804771335d41b1b/jmh-core-1.36.jar:/root/.gradle/caches/modules-2/files-2.1/net.sf.jopt-simple/jopt-simple/5.0.4/4fdac2fbe92dfad86aa6e9301736f6b4342a3f5c/jopt-simple-5.0.4.jar:/root/.gradle/caches/modules-2/files-2.1/org.apache.commons/commons-math3/3.2/ec2544ab27e110d2d431bdad7d538ed509b21e62/commons-math3-3.2.jar:/root/.gradle/caches/modules-2/files-2.1/org.ow2.asm/asm/9.0/af582ff60bc567c42d931500c3fdc20e0141ddf9/asm-9.0.jar:/workspace/microbench/build/libs/microbench-jmh.jar -Dsun.java.command=org.openjdk.jmh.Main BigIntegerBenchmark.* -i 10 -bm thrpt -f 1 -foe 0 -gc 0 -o /workspace/microbench/build/reports/jmh/output.txt -rf CSV -rff /workspace/microbench/build/reports/jmh/results.csv -t 1 -to 1s -tu ms -v NORMAL -w 1s -wf 0 -wi 5 -wm INDI -wmb .*Warmup -Dsun.java.launcher=SUN_STANDARD -Xjit:{*BigInteger.*}(traceCG,log=log)
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 10 iterations, 10 s each
# Timeout: 1 s per iteration, ***WARNING: The timeout might be too low!***
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: lang.math.BigIntegerBenchmark.benchmarkSquare

# Run progress: 0.00% complete, ETA 00:01:45
# Fork: 1 of 1
# Warmup Iteration   1: 109.397 ops/ms
# Warmup Iteration   2: 234.682 ops/ms
# Warmup Iteration   3: 322.830 ops/ms
# Warmup Iteration   4: 400.651 ops/ms
# Warmup Iteration   5: 499.290 ops/ms
Iteration   1: 522.352 ops/ms
Iteration   2: 539.755 ops/ms
Iteration   3: 520.615 ops/ms
Iteration   4: 511.479 ops/ms
Iteration   5: 545.984 ops/ms
Iteration   6: 538.478 ops/ms
Iteration   7: 537.353 ops/ms
Iteration   8: 545.076 ops/ms
Iteration   9: 548.644 ops/ms
Iteration  10: 550.709 ops/ms


Result "lang.math.BigIntegerBenchmark.benchmarkSquare":
  536.044 ?(99.9%) 20.187 ops/ms [Average]
  (min, avg, max) = (511.479, 536.044, 550.709), stdev = 13.353
  CI (99.9%): [515.857, 556.232] (assumes normal distribution)


# Run complete. Total time: 00:01:46

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                             Mode  Cnt    Score    Error   Units
BigIntegerBenchmark.benchmarkSquare  thrpt   10  536.044 ? 20.187  ops/ms

Benchmark result is saved to /workspace/microbench/build/reports/jmh/results.csv
